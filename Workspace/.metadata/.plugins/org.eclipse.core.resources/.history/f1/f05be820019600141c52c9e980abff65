package com.dipiuay.bouncingballgame;

import android.content.Context;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.PointF;
import android.graphics.RectF;
import android.view.Surface;
import android.view.View;

public class PlaygroundView extends View {

	private static final Logger logger = new Logger("PlaygroundView");
	private static final int PlaygroundColor = Color.parseColor("#99000000");
	private final Paint paint;
	private float playgroundStrokeWidth;
	private int width;
	private int height;
	private float scale;
	private float angle;
	private PointF translation;
	private PointF transformationCenter;
	private GameInfo lastGameInfo;	
	
	public PlaygroundView(Context context) {
		super(context);
		
		this.paint = new Paint();
	}

	@Override
	protected void onSizeChanged(int w, int h, int oldw, int oldh) {
		super.onSizeChanged(w, h, oldw, oldh);
		
		GameInfo game = this.lastGameInfo;
		
		if(game != null){			
			this.width = w;
			this.height = h;
			this.playgroundStrokeWidth = Math.min(this.width, this.height) / 20;
			logger.log("OnSizeChanged size: (" + this.width + "; " + this.height + ")");
	
			this.applyPlaygroundTransformation(game);
	
			this.drawPlaygroundBounds(game);	
			this.drawCircle(game.target);	
			this.drawCircle(game.ball);			
		}
	}

	@Override
	protected void onDraw(Canvas canvas) {
		logger.log("onDraw");

		GameInfo game = this.lastGameInfo;
		
		if(game != null){	
			canvas.translate(this.translation.x, this.translation.y);
			canvas.rotate(this.angle, this.transformationCenter.x, this.transformationCenter.y);
			canvas.scale(this.scale, this.scale, this.transformationCenter.x, this.transformationCenter.y);
			
			this.drawPlaygroundBounds(canvas, game.playground);	
			this.drawCircle(canvas, game.target);	
			this.drawCircle(canvas, game.ball);			
		}
				
		this.invalidate();	
	}
	
	private void applyPlaygroundTransformation(GameInfo game){
		int rotation = GameApplication.getRotation();
		float gameCenterX = game.playground.centerX();
		float gameCenterY = game.playground.centerY();
		float availableWidth = this.width - 2 * this.playgroundStrokeWidth;
		float availableHeight = this.height - 2 * this.playgroundStrokeWidth;
		float gameWidth = game.playground.width();
		float gameHeight = game.playground.height();
		float angle = 0;
		
		switch(rotation){
			case Surface.ROTATION_0:
				angle = 0;
				this.scale = Math.min(availableWidth / gameWidth, availableHeight / gameHeight);
				break;
			case Surface.ROTATION_90:
				angle = 90;
				this.scale = Math.min(availableWidth / gameHeight, availableHeight / gameWidth);
				break;
			case Surface.ROTATION_180:
				angle = 180;
				this.scale = Math.min(availableWidth / gameWidth, availableHeight / gameHeight);
				break;
			case Surface.ROTATION_270:
				angle = 270;
				this.scale = Math.min(availableWidth / gameHeight, availableHeight / gameWidth);
				break;
		}
				
		//logger.log("Is canvas matrix identity: " + (this.canvas.getMatrix().isIdentity() ? "yes" : "no"));
		this.translation = new PointF(this.width / 2.0f - gameCenterX, this.height / 2.0f - gameCenterY);
		this.angle = - angle;
		this.transformationCenter = new PointF(gameCenterX, gameCenterY);		
	}
	
	private void setColor(int color){
		this.paint.setColor(color);
	}
	
	private void setStyle(Paint.Style style){
		this.paint.setStyle(style);
	}
	
	private void setStrokeWidth(float width){
		this.paint.setStrokeWidth(width / this.scale);
	}
	
	private void drawCircle(ICircleObject circle){
		PointF position = circle.getPosition();
		float radius = circle.getRadius();
		
		this.setColor(circle.getColor());
		this.setStyle(Paint.Style.FILL);
		this.setStrokeWidth(0);
		this.canvas.drawCircle(position.x, position.y, radius, this.paint);
	}
	
	private void drawPlaygroundBounds(Canvas canvas, RectF rect){
		float w = this.playgroundStrokeWidth / this.scale / 2.0f;
		RectF enlargedRect = new RectF(rect.left - w, rect.top - w, rect.right + w, rect.bottom + w);
		
		this.setColor(PlaygroundColor);
		this.setStyle(Paint.Style.FILL_AND_STROKE);
		this.setStrokeWidth(this.playgroundStrokeWidth);
		canvas.drawRect(enlargedRect, this.paint);
		
		this.setColor(Color.BLUE);
		this.setStyle(Paint.Style.STROKE);
		this.setStrokeWidth(this.playgroundStrokeWidth);
		canvas.drawRect(enlargedRect, this.paint);
	}

	public void OnGameChanged(GameInfo gameInfo) {
		this.lastGameInfo = gameInfo;
		logger.log("OnGameChanged");
	}	
}
